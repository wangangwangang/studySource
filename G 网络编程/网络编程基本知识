~网络编程模型
	   OSI七层                           					TCP/IP四层								支持协议
		应用层													应用层						HTTP/TFTP/FTP/NFS/WAIS/SMTP
		表示层													应用层						TELNET/RLOGIN/SNMP/GOPHER
		会话层													应用层						SMTP/DNS
		传输层													传输层						TCP/UDP
		网络层													网际层/网间层				IP/ICMP/ARP/RARP/AKP/UUCP
		数据链路层												网络接口层					PDDI/ETHERNET/PDN/PPP
		物理层													网络接口层					IEEE 802.1A,IEEE 802.2~IEEE 802.11
		
~TCP/UDP区别
	1.TCP：面向连接的，可靠的，字节流服务
	2.UDP：无连接的，不可靠的，数据协议报
	

~字节序
	1.大端字节序（网络字节序）：小地址存储小数据
	2.小端字节序：小地址存储大数据


~字节序数字转换
	1.ntohs(num):网络->主机
	2.htons(num):主机->网络 


~字节序字符串转换
	1.inet_ntop():网络->主机
		(1)原型：const char *inet_ntop(
										int 			af,					地址族，如AF_INET为IPV4 、AF_INET6为IPV6
										const void* 	restrict src,		网络ip地址，存储在addr1.sin_addr.s_addr中
										char*			restrict dst,	 	主机ip地址，储存在字符数组中
										socklen_t		size				指向缓存区dst的大小，避免溢出
									  );
	2.inet_pton():主机->网络
		(2)原型：const inet_pton(
									int 			af;						地址族，如AF_INET为IPV4、AF_INET6为IPV6
									const char* 	restrict src;			主机ip地址，储存在字符数组中
									void*			restrict dst;			网络ip地址，存储在addr1.sin_addr.s_addr中
								)
	
	
~struct sockaddr			通用地址族结构,<sys/socket.h>
 {
	sa_family_t		sa_family;					地址族
	char			sa_data[14];				地址值：IP port 等
 };

 
~struct sockaddr_in			IPV4地址族结构,<netinet/in.h>
 {
	uint_t				sin_family;				地址族，如AF_INET为IPV4、AF_INET6为IPV6
	uint_t				sin_port;				端口
	struct in_addr		sin_addr;				ip
	char				sin_zero[8];			预留空空间
 };
 
//ip6地址
struct in6_addr
{
    union
    {
        uint8_t __u6_addr8[16];   // 128 bit
        #if defined __USE_MISC || defined __USE_GNU
        uint16_t __u6_addr16[8];  // 64 bit
        uint32_t __u6_addr32[4];  // 32 bit
        #endif
    } __in6_u;
    #define s6_addr         __in6_u.__u6_addr8
    #if defined __USE_MISC || defined __USE_GNU
    # define s6_addr16      __in6_u.__u6_addr16
    # define s6_addr32      __in6_u.__u6_addr32
    #endif
}

 
~struct	in_addr
 {
	in_addr_t			s_addr;					ip
 }
		
		
~域名解析:下面的表存储在域名服务器中
					域名							ip地址
				www.sohu.com					221.159.191.18
				www.baidu.com					36.152.44.96
				   ...								...
				   
				   
~客户端访问网页流程：
	1.首先访问域名服务器，返回ip地址
	2.通过ip地址访问应用服务器
	
~通过域名获取ip的方法
	1.在终端执行ping命令，无论是否联通，下面都会提示域名服务器返回的IP相关信息
	2.通过域名解析网站，在chrome收藏夹中
	3.通过编程API函数获取

	
~gethostbyname():	域名解析
	1.原型：struct	hostent *gethostbyname(
											const  char  *hostname		域名										  
										  )
	2.struct  hostent				域名对应的应用服务器的信息结构
	  {
		char* 		h_name;				域名
		char* 		h_aliases;			别名
		int   		h_addrtype;			地址族，如AF_INET为IPV4
		int   		h_length;			
		char**  	h_addr_list;		IP列表（网络字节序）
	  };


--------------------------------------------------tcp建立-----------------------------------------------------------
~客户端
	·socket()
	·connect()
	·read()
	·write()



~socket()	初始化创建套接字
	1.依赖库：<sys/socket.h>
	2.原型：int socket(						返回值是套接字文件描述符
						int domain,			地址族，如AF_INET为IPV4
						int type,			协议类型：SOCK_STREAM/tcp  SOCK_DGRAM/udp
						int protocol		指定具体协议，通常传递0
					  );

					  
~connect()	客户端用来连接服务端
	1.依赖库：<sys/types.h> <sys/socket.h>
	2.原型：int connect(
							int 				sockfd,			socket文件描述符
							struct sockaddr*	seraddr,		服务器地址结构
							int					addrlen			服务器地址结构长度
					   );
	
~服务端 
	·socket()
	·bind()
	·listen()
	·accept()
	·read()
	·write()

~socket()	初始化创建套接字
	1.依赖库：<sys/socket.h>
	2.原型：int socket(						返回值是套接字文件描述符
						int domain,			地址族，如AF_INET为IPV4
						int type,			协议类型：SOCK_STREAM/tcp  SOCK_DGRAM/udp
						int protocol		指定具体协议，通常传递0
					  );
					   
~bind()	服务端用来固定本地端口和IP
	1.依赖库：<sys/socket.h> <sys/types.h>
	2.原型：int bind(
						int     				sockfd,			socket文件描述符
						const struct sockaddr*	seraddr,		服务器地址结构
						socklen_t				addrlen			服务器地址结构长度
					);

					
~listen()	服务端设置表明sock为服务端
	1.依赖库：<sys/socket.h>
	2.原型：int listen(
						int sockfd,			socket文件描述符
						int backlog			决定挂起连接的队列的大小个数
					  );

					  
~accept()：服务端用来建立与客户端的连接
	1.依赖库：<sys/socket.h>
	2.原型：int accept(										返回已链接套接字，用来监控具体的已连接客户端
						int 				sockfd,			监听套接字，用来监控是否有新客户端链接进来
						struct sockadd* 	cliaddr,		客户端地址
						socklen_t*			addrlen			客户端地址长度，在此之前必须对addrlen赋值
					  );

----------------------------------------------------------------------------------------------------------------------------

------------------------------------------------udp建立---------------------------------------------------------------------
~客户端
	·socket()
	·sendto()

~服务端
	·socket()
	·bind()
	·recvfrom()

~socket()	初始化创建套接字
	1.依赖库：<sys/socket.h>
	2.原型：int socket(						返回值是套接字文件描述符
						int domain,			地址族，如AF_INET为IPV4
						int type,			协议类型：SOCK_STREAM/tcp  SOCK_DGRAM/udp
						int protocol		指定具体协议，通常传递0
					  );

~bind()	服务端用来固定本地端口和IP
	1.依赖库：<sys/socket.h> <sys/types.h>
	2.原型：int bind(
						int     				sockfd,			socket文件描述符
						const struct sockaddr*	seraddr,		服务器地址结构
						socklen_t				addrlen			服务器地址结构长度
					);
					
~sendto()	udp客户端向服务端发送消息
	1.依赖库：<sys/types.h> <sys/socket.h>
	2.原型：ssize sendto(										成功则返回实际传送出去的字符数，失败返回－1，错误原因存于errno 中
						  int 			soctfd,					udp套接字
						  const void* 	buf,					发送的信息
						  size_t 		len,					发送信息的大小
						  int 			flags,					参数flags 一般设0，详细描述请参考send()
						  const struct sockaddr* dest_addr,		服务器地址
						  socklen_t 	addrlen)				服务器地址长度

~recvfrom()	udp服务端从客户端接受信息
	1.依赖库：<sys/types.h> <sys/socket.h>
	2.原型：ssize_t recvfrom(										成功则返回接收到的字符数,失败返回-1
								int 		sockfd, 				udp套接字
								void 		*buf, 					用于接受消息的字符串
								size_t 		len, 					字符串大小
								int 		flags,					参数flags 一般设0，详细描述请参考recvfrom()
								struct 		sockaddr *src_addr, 	用于接受客户端地址
								socklen_t 	*addrlen);				用于接受客户端地址长度
-------------------------------------------------------------------------------------------------------------------------					  


~Tcp协议端口状态说明：
	1）LISTENING：tcp服务端开启，端口处于监听状态
	2）ESTABLISHED：建立链接状态
	3）CLOSE_WAIT：对方主动关闭链接或者网络异常导致链接中断，这时我方的状态
	4）TIME_WAIT：我方主动断开链接，收到对方确认后状态变为TIME_WAIT。默认3-4min资源不被释放
	
~socket程序退出后端口依然被占用问题的解决
	1）方法一：查看端口对应的pid，杀死。例：8888
		lsof  -i:8888
		kill -9 pid_8888
	2）方法二：端口处于timeout_wait状态，设置socket的SO_REUSEADDR选项
		int opt=1;
		set sockopt(listenfd ,SOL_SOCKET,SO_REUSEADDR,&opt,sizeof(opt1));
		
		以上两步操作在listenfd=socket()之后
		            在ret=bind()之前