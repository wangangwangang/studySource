	***************************************************************************************
	*                                 Makefile基础知识                                    *
	***************************************************************************************


~大型项目从.c源文件到可执行程序的过程：
	1.先利用编译makefile生成.o文件库
	2.通过link.x这个脚本来控制执行链接makefile,生成可执行程序
	3.start.x控制执行可执行文件

~编写Makefile步骤
	1.读懂/写好基础逻辑代码
	2.优化代码结构
	3.确定源文件目录（源文件目录/目标文件目录）
	4.编写Makefile文件
		1）确定.o文件在源文件目录还是在OBJ目录
		2）确定写一个Makefile还是写分组Makefile文件
	
~make的工作机制？
	1.make会在当前目录下自动寻找名字叫做Makefile或makefile的文件
	2.如果找到,它会找文件中的第一个目标文件(target),并把这个文件作为最终的目标文件	
	3.如果目标文件不存在,或者目标文件所依赖的文件修改时间比目标文件新,那么就会执行后面所定义的命令来生成这个目标文  件
	4.如果依赖的文件不存在,那么就到下面去找依赖文件的生成依赖关系
	5.最终目标就是生成第一个目标文件
	6.C文件和H文件是源文件必须存在

~make的执行顺序总结？
	1.本质上就是以第一个目标文件的依赖文件书写顺序依次生成,最终生成第一个目标文件
	2.依赖文件的生成中,命令执行是按照预处理->编译->汇编->链接为顺序执行的,与之后命令的书写顺序无关
	
	
~make文件名称如果不叫Makefile或makefile,又或者文件不再当前目录下？
	make -f <path/makefilename>
	
~makefile文件中的命令必须以Tab键开始

~make定义：
	1.make是一个自动编译工具
	
	2.make工具定义了一套自动编译的规则,配合makefile文件执行
	

~makefile/Makefile(创建的文本文档固定名称)定义：
	1.makefile是一种利用广泛的编译脚本
	2.makefile中的重要内容是：指定了目标文件,指定了各文件的依赖关系,定义了一些伪目标辅助处理文件
	3.本质上来说,makefile文件是执行make命令的核心配置文件
	4.makefile文件用于管理和组织代码工程的编译和链接,其不是可执行文件,其被make工具解析并完成相关动作
	

~linux下C文件编译链接过程
	1.->编辑：文本编辑
	  ->命令：vi test.c
	  ->生成文件：test.c(高级语言)
	2.->预处理：
				1)将所有的#define删除,并且展开所有的宏定义,字符替换
				2)处理所有的条件编译指令,#ifdef #ifndef #endif等
				3)处理#include,将#include指向的文件拷贝到当前文件中
				4)删除所有注释
				5)添加行号和文件标识,这样在调试和编译出错的时候才知道是哪个文件的哪一行
				6)保留#pragma编译器指令,因为编译器需要使用它们
	  ->命令：gcc -E test.c -o test.i
	  ->生成文件：test.i(简单处理后的高级语言)
	3.->编译：
				1)词法分析
				2)语法分析
				3)语义分析
				4)优化后生成相应的汇编代码
	  ->命令：gcc -S test.i -o test.s
	  ->生成文件：test.s(汇编语言)
	4.->汇编：将汇编语言转成机器语言(二进制语言)
	  ->命令：gcc -c test.s -o test.o
	  ->生成文件：test.o(机器语言/二进制语言)
	  （在编译阶段检查声明，即需要.h文件）
	5.->链接：将翻译成的二进制语言与需要用到的库绑定在一块    
	  ->命令：gcc test.o -o test
	  ->生成文件：test(可执行文件)：.exe(windows)/.elf(linux)
	  （在链接阶段需要检查定义，即需要使用.o文件）

~nm -C  *.o
	作用：检查*.o文件中定义了哪些函数，U开头代表需要去外部库查找函数定义，T开头代表需要去本文件查找函数定义


~makefile创建规则
	1.第一层：显式规则
				1)#是注释，如果在注释行末尾加上\符号，则下一行也被注释，可以实现多行注释
				2)第一个目标文件是最终目标,之后的语句最好递归(也就是说按照编译链接的过程逆向书写),也可以不递归
				3)常规目标格式：
								目标文件：依赖文件
								<Tab><命令>
				4)伪目标格式：
								.PHONY
								伪目标文件：
								<Tab><命令>
	2.第二层：变量
				1)=    替换
				2)+=   追加
				3):=   恒等于,只有:=和=后面有变量时两者才有区别，:=只识别变量已有的值，=会一直搜索之后变量的值
					例如：(1)a=1
					         b=$a
						     a=2     此时输出的b=2
                          (2)a=1
                             b:=$a
							 a=2     此时输出的b=1
						  
						  
				4)?=	如果左边的变量未被赋值，则将右边的值赋给左边的变量
	3.第三层：隐含规则
				1)%.c %.o      任意的文件,使用时别忘了加路径
			
	4.第四层：通配符
				1)$^		所有的依赖文件
				2)$@		所有的目标文件
				3)$*		不包括扩展名的目标文件名称
				4)$+		所有的依赖文件,以空格分开,并以出现的先后为序,可能包含重复的依赖文件
				5)$<		第一个依赖文件的名称
				6)$?		所有时间戳比目标文件晚的依赖文件,并以空格分开
				7)@			这个符串通常用在“规则”行（命令行）中，表示不显示命令本身，而只显示他的结果
	5)第五层：函数
	
	
~文件包含
	语法：include 文件名
	作用：将其它makefile文件包含进来,组成一个更大的makefile文件,这样有利于makefile模块化编程。
	      通常我们将一些配置选项分开成一个独立的makefile文件,这样有利于makefile文件的管理,或将
		  模块代码的依赖关系和需要编译的文件信息独自写到一个 makefile文件中,最终通过include命令
		  形成一个顶层makefile文件来完成整个工程代码的编译和链接。

~ifdef/ifndef/ifeq/ifneq用法
  1)基本概念
	关键字	功能                                                 
	ifeq	判断参数是否相等,相等为 true,不相等为 false。		
	ifneq	判断参数是否不相等,不相等为 true,相等为 false。
	ifdef	判断是否有值,有值为 true,没有值为 false。
	ifndef	判断是否没有值,没有值为 true,有值为 false。
	
  2)用法：注意ifeq后有空格，ifdef后变量不要加$
	(1) ifeq基本用法判断是否相等：
         ifeq ($(变量名), 变量值 )
			...
		 else 
		    ...
         endif
		 
		ifeq基本用法判断有值：
         ifeq ($(变量名), )
			...
		 else 
		    ...
         endif
	(2)ifeq逻辑与判断
         C语言判断是否存在：  if ( VALUE1  &&  VALUE2)
							  {
								...
                              } 
         makefile判断是否存在： ifeq ($(VALUE1)$(VALUE2),)
                                {
									...
						        }
						        endif
        
		 C语言判断是否相等：if（VALUE1 == V1 && VALUE2 == V2）
		   				    {
								...
						    }
         makefile判断是否相等：ifeq ($(VALUE1)_$(VALUE2), V1_V2)     ### 当然中间的下划线 "_" 可以用其他字符代替  
                              {
								...
							  }
                              endif

     (3) 逻辑或变通实现
         C语言判断是否相等：if( VALUE1 == V1 || VALUE2 == V2 )       ###注意：这里的意思是VALUE1 == V1或者VALUE2 == V2 
		                    {
								...
							} 
							
         makefile判断是否相等：ifeq ($(findstring  $(VALUE1)$(VALUE2),  V1  V2),)  ###注意：这里的意思是VALUE1==V1或VALUE1==V2或VALUE2==V1或VALUE2==V2，$(VALUE1)$(VALUE2)之间不能有空格，V1和V2之间有空格
                               {
								...
							   }
                               endif
							
							
							

~Makefile编译时怎么打印出变量值和提示信息
	1)利用info函数:$(info ...)
	  例子：$(info test info...)
	  输出：test info...
	2)利用warning函数:$(warning ...)
	  例子：a=1
	        $(warning a=$a)
	  输出：makefile:9: a=1
	3)利用error函数:$(error ...)
	  例子：a=1
		    $(error a=$a)
	  输出：makefile:9: *** a=1 Stop.
	  注意：error函数执行之后，立刻stop退出
	  
	  
	  
~wildcard函数用法
	1)它的用法是：$(wildcard ...) 
				例如：$(wildcard *.c)  $(wildcard $A)
	2)在Makefile中，它被展开为已经存在的、使用空格分开的、匹配此模式的所有文件列表
	
~如何执行shell语句
	1)在Makefile文件的目标项冒号后的另起一行
	   例如:	target:
					<command>

~$(shell <command> )与shell脚本中``作用相同，提取命令结果					
		   
~define定义变量：
	1)以指示符“define”开始，“endef”结束，之间的所有内容就是所定义变量的值。所要定义的变量名字和指示符“define”在
    同一行，使用空格分开；指示符所在行的下一行开始一直到“endef”所在行的
	上一行之间的若干行，是变量值。
	2)例子：define two-lines
			echo foo
			echo $(bar)
			endef
	
~Makefile中宏定义,相当于C中的全局#define
	1)是给make解释器用的，对所编译的文件完全没有作用。
	2)宏定义方式：字串定义方式和值定义方式
		EXTRA_DEFINES+= -DBIND=1 -DNO_BIND=2 -DPLATFROM_PHOENIX
		CC_TVOPTS += -DMS_BOARD_TYPE_SEL=$(BOARD_TYPE_SEL)
		CC_TVOPTS += -DMS_SW_CUS_SEL=SW_CONFIG_TRUNK_ATVMM
		CC_TVOPTS += -DENABLE_CAPE=0
		CC_TVOPTS += -DMS_SW_TEST=\"VIDEOCON.BIN\"
		
~GCC编译选项
	1)-E 							预处理，生成.i文件
									gcc -E main.c -o main.i
	2)-S 							编译，生成.s文件
								    gcc -S main.c -o main.s 
	3)-c							汇编，生成.o文件
									gcc -c main.c -o main.o 
	4)-o 							用户输出指定文件名
									gcc main.c -c go  
	5)-g   							指明编译程序在编译的输出中应产生调试信息.这个调试信息使源代码和变量名引用在调试程序中
									或者当程序异常退出后在分析core文件时可被使用.
	6)-D  					        允许从编译程序命令行定义宏符号,一共有两种情况:
									一种是用-DMACRO,相当于在程序中使用#define MACRO
									另一种是用-DMACRO=A,相当于程序中的#define MACRO A
	7)-I  							可指定查找include文件的其他位置.例如,如果有些include文件位于比较特殊的地方,
									比如/usr/local/include,就可以增加此选项如下:
									gcc -c -I/usr/local/include -I/opt/include hello.c 
	8)-O(大写的o)  					优化选项,这个选项不是标准的
									-O和 -O1指定1级优化
									-O2 指定2级优化
									-O3 指定3级优化
									-O0指定不优化
									gcc -c O3 -O0 hello.c 
									当出现多个优化时,以最后一个为准!!
	9)-Wall 						以最高级别使用GNU编译程序,专门用于显示警告用!!
									gcc -Wall hello.c 
	10)-L					        指定连接库的搜索目录,-l(小写L)指定连接库的名字
								    gcc main.o -L/usr/lib -lqt -o hello
	11)-share 　　					此选项将尽量使用动态库，所以生成文件比较小，但是需要系统由动态库
	12)-static 　					此选项将禁止使用动态库，所以，编译出来的东西,一般都很大，也不需要什么动态连接库
	13)-fPIC						表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时是通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码段共享的目的。

~include -include sinclude用法以及区别
	1)include关键字可以把别的关键字包含进来，类似于C语言的#include，被包含的文件会原模原样的放在当前文件的包含位置
	2)include <filename>:在执行make时，当包含的文件不存在或者不存在一个规则去创建它时，make程序会提示错误
并退出
	3)-include <filename>:在执行make时，当包含的文件不存在或者不存在一个规则去创建它时，make程序会继续执行，只有真正不能正确完成终极目标的重建时
	（某些必需的目标无法在当前已读取的makefile文件内容中找到正确的重建规则），才会提示致命错误并退出
	4)-include与sinclude的用法一直
	
~$(filter PATTERN…,TEXT) 
	1)函数名称：过滤函数—filter。 
	2)函数功能：过滤掉字串“TEXT”中所有不符合模式“PATTERN”的单词，保留所
				有符合的。可以使用多个模式。模式中一般需要包含模式字
				符“%”。存在多个模式时，模式表达式之间使用空格分割。 
	3)返回值：空格分割的“TEXT”字串中所有符合模式“PATTERN”的字串。 
	4)示例： 
		sources := foo.c bar.c baz.s ugh.h 
		foo: $(sources) 
		cc $(filter %.c %.s,$(sources)) -o foo 
 
		使用“$(filter %.c %.s,$(sources))”的返回值给 cc 来编译生成目标“foo”，函数返回
		值为“foo.c bar.c baz.s”

~$(filter-out PATTERN…,TEXT)
	1)函数名称：反过滤函数。
	2)函数功能：过滤掉所有符合模式“PATTERN”的单词，保留不符合的
	
~$(wildcard PATTERN...) 
	1)在Makefile中，它被展开为已经存在的、使用空格分开的、匹配此模式的所有文件列表。
	2)示例：
		$(wildcard *.c)

~$(notdir ...) :去除文件路径

~$(patsubst %.c,${DIR_OBJ}/%.o,$(notdir ${SR}))) :将.c文件转换为对应的.o文件并放入指定的列表

