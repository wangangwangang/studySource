~什么是memcached？
	memcached 是一个高性能的分布式内存对象缓存系统，用于动态web应用以减轻数据库负载。
	他通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态，数据库驱动网站的速度。

~基本特征
	1.协议简单：使用基于文本行的协议
	2.基于内存存储：数据存储在内存中
	3.事件处理：基于libevent开发
	
~安装memcached：具体安装步骤百度搜索
	wget http://memcached.org/latest
	tar zxvf memcached-1.4.21.tar.gz && cd memcached-1.4.21
	./configure 
	make 
	make install

~如何运行/结束memcached？
	memcached -d -m 128 -u wanga -p 11111 -P `pwd`/mem.pid
	
	-d	以守护进程模式运行memcached
	-m	设置memcached可以使用的内存大小，单位为M
	-u	指定用户
	-i  设置监听的ip地址，默认为INADDR_ANY
	-c  设置最大链接数，默认为1024
	-R  设置一个客户端的最大链接请求数，默认为20 
	-p  设置TCP监听端口
	-U  设置UDP监听端口
	-P	设置memcached的pid文件，文件里面存储着此次开启的进程id
	
	
~基本终端命令？
		add						新增，存在报错
 		set						设置，存在覆盖，不存在新建
		replace					替换，不存在报错
		append					在现有数据之后添加字符
		prepend					在现有数据之前添加字符
		delete					删除数据
		flush_all				清空所有输一局
		get 					获取数据，可以一次性查询多个key，空格隔开
		stats					查看所有状态
		stats items				查看条目状态
		stats slabs				查看内存状态
	

-----------------------------------------------API使用----------------------------------------------------
~目标：
	1.与memcached服务器简单交互
	2.mysql与memcached服务器数据交互
	3.memcached客户端实现分布式缓存
----------------------------------------------------------------------------------------------------------
~安装libmemcached三方开发包：动态链接文件/头文件
	头文件在/usr/local/include/libmemcahced下，动态库在/usr/local/lib下

~相关结构：	
	memcached_st结构：用于保存memcached对象
	memcached_return_t结构：用于保存memcached命令执行状态（返回MEMCACHED_SUCCESS代表成功，否则视为失败）
	memcached_server_st结构：用于存储memcached服务器列表

~创建句柄对象：
	memcached_create()

~销毁句柄对象：
	memcached_free()

~创建链接：
	1.memcached_server_add()
	2.组合
	  memcached_server_list_append()
	  memcached_server_push()			

~计算当前server的个数:
	memcached_server_count()

~清空server列表
	memcached_server_reset()

~释放memcached_server_st结构
	memcached_server_list_free()

~向memcached写入一条数据，存在即覆盖，不存在即新建
	memcached_return_t memcached_set()
	
~向memcached新建一条数据，存在即报错
	memcached_return_t memcached_add()

~向memcached替换一条数据，不存在即报错
	memcached_return_t memcached_replace()
	
~在原来的字符串之前添加内容
	memcached_return_t memcached_prepend()
	
~在原来的字符之后添加内容
	memcached_return_t memcached_appent()
	
~将指定的key对应的value值加1
	memcached_return_t memcached_increment()

~将指定的key对应的value值减1
	memcached_return_t memcached_decrement()
	
~获取单个数据
	char* memcached_get()
	
~获取多个数据
	memcached_return_t memcached_mget()
	char*              memcached_fetch()         //将多个数据依次提取出来
	
~检查key值是否存在
	memcached_return_t memcached_exist()
	
~删除数据
	memcached_return_t memcached_delete()
	
~清除数据
	memcached_return_t memcached_flush()
	
